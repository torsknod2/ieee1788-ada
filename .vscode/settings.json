{
    "ada.useGnatformat": true,
    "ada.renameInComments": true,
    "ada.enableIndexing": true,
    "ada.followSymlinks": true,
    "ada.documentationStyle": "gnat",
    "ada.displayMethodAncestryOnNavigation": "always",
    "ada.foldComments": true,
    "ada.insertWithClauses": true,
    "ada.namedNotationThreshold": 0,
    "ada.useCompletionSnippets": true,
    "git.autofetch": "all",
    "git.autoStash": true,
    "git.blame.editorDecoration.enabled": true,
    "git.blame.statusBarItem.enabled": true,
    "git.closeDiffOnOperation": true,
    "git.enableCommitSigning": true,
    "git.enableSmartCommit": false,
    "git.followTagsWhenSync": true,
    "git.fetchOnPull": true,
    "git.inputValidation": true,
    "git.mergeEditor": true,
    "git.pruneOnFetch": true,
    "git.pullBeforeCheckout": true,
    "git.rebaseWhenSync": true,
    "git.replaceTagsWhenPull": true,
    "git.supportCancellation": true,
    "git.terminalGitEditor": true,
    "git.timeline.showUncommitted": true,
    "git.useCommitInputAsStashMessage": true,
    "git.verboseCommit": true,
    "github.copilot.chat.attachContext": true,
    "github.copilot.chat.attachContext.codebase": true,
    "github.copilot.chat.attachContext.VSCodeAPI": true,
    "github.copilot.chat.scopeSelection": true,
    "github.copilot.chat.generateTests.codeLens": true,
    "github.copilot.chat.search.semanticTextResults": true,
    "githubPullRequests.assignCreated": "${user}",
    "githubPullRequests.experimental.chat": true,
    "githubPullRequests.experimental.notificationsView": true,
    "githubPullRequests.experimental.useQuickChat": true,
    "githubPullRequests.notifications": "pullRequests",
    "githubPullRequests.quickDiff": true,
    "githubPullRequests.showPullRequestNumberInTree": true,
    "github.copilot.chat.editor.temporalContext.enabled": true,
    "codeQL.runningQueries.saveCache": true,
    "codeQL.runningQueries.useExtensionPacks": "all",
    "codeQL.addingDatabases.addDatabaseSourceToWorkspace": true,
    "evenBetterToml.formatter.alignComments": true,
    "evenBetterToml.formatter.alignEntries": true,
    "evenBetterToml.formatter.arrayAutoCollapse": true,
    "evenBetterToml.formatter.arrayAutoExpand": true,
    "evenBetterToml.formatter.arrayTrailingComma": true,
    "evenBetterToml.formatter.compactArrays": true,
    "evenBetterToml.formatter.compactEntries": true,
    "evenBetterToml.formatter.compactInlineTables": true,
    "evenBetterToml.formatter.indentEntries": true,
    "evenBetterToml.formatter.indentTables": true,
    "evenBetterToml.formatter.inlineTableExpand": true,
    "evenBetterToml.formatter.reorderArrays": true,
    "evenBetterToml.formatter.reorderInlineTables": true,
    "evenBetterToml.formatter.reorderKeys": true,
    "evenBetterToml.schema.links": true,
    "evenBetterToml.semanticTokens": true,
    "gcovViewer.highlightMissedLines": true,
    "github.copilot.chat.edits.codesearch.enabled": true,
    "github.copilot.nextEditSuggestions.enabled": true,
    "github.copilot.chat.edits.temporalContext.enabled": true,
    "github.copilot.chat.testGeneration.instructions": [
        {
            "text": "General for all code: The statement and MC/DC target for source code and the branch coverage target for object code is 100%.\nRegarding Ada: The base package of the implementation is Ieee1788. The base package of its tests shall be Ieee1788.Tests. All tests shall be implemented using AUnit. For each function reachable by AUnit, a Test_Suite shall be generated, which has one Test_Case for each matrix combination of the input parameters. The Test_Case shall be named after the function and the matrix combination. The Test_Case shall contain a Test_Assertion for each output parameter. The assertions shall compare all outputs and the return value. The Test_Suites for each function shall be bundled in a Test_Suite for the package. If there are intermediate packages below Ieee1788, there shall be a Test_Suite for each level containing the Test_Suites of the direct sub-packages. For generic packages, the Test_Suite shall also be generic. Instantiation of the Test_Suite shall happen in the lowest level non-generic Test_Suite. Also, tests shall have complete GNATdoc compliant documentation.\nRegarding Python: doctests from docutils shall be preferred over unittests. If unittests are required, they shall use type annotations and meet all style and docstring documentation requirements. Restructured text may be usedin the docstrings."
        }
    ],
    "github.copilot.chat.commitMessageGeneration.instructions": [
        {
            "text": "The first line of the commit message shall start with either a hash and the pull request number or, if not existing, a hash and the issue number. The number shall be followed by a space and then contain a short summary. The short summary shall be the title of the pull requests or, if not existing, the title of the issue. If neither is existing a summary shall be generated based on the changes. The following lines shall be a nested MarkDown list having an entry for each changed file. Below the entry for the file a nested list shall be created describing each change in the file in one sentence."
        }
    ],
    "githubPullRequests.defaultMergeMethod": "squash",
    "githubPullRequests.labelCreated": [
        "auto-squash",
        "auto-rebase"
    ],
    "githubPullRequests.pullRequestDescription": "Copilot",
    "githubPullRequests.pullPullRequestBranchBeforeCheckout": "pullAndUpdateBase",
    "githubPullRequests.pullBranch": "always",
    "githubPullRequests.remotes": [
        "origin",
        "upstream",
        "github"
    ],
    "isort.check": true,
    "importSorter.generalConfiguration.sortOnBeforeSave": true,
    "markdown.enableMetadataDateReminder": true,
    "markdown.previewFeatures": true,
    "markdown.replaceSmartQuotes": true,
    "merge-conflict.autoNavigateNextConflict.enabled": true,
    "plantuml.exportMapFile": true,
    "pre-commit-helper.runOnSave": "all hooks",
    "python.analysis.autoImportCompletions": true,
    "python.analysis.typeEvaluation.enableReachabilityAnalysis": true,
    "python.analysis.typeEvaluation.strictDictionaryInference": true,
    "python.analysis.typeEvaluation.strictListInference": true,
    "python.analysis.typeEvaluation.strictSetInference": true,
    "python.createEnvironment.contentButton": "show",
    "python.terminal.activateEnvInCurrentTerminal": true,
    "python.terminal.shellIntegration.enabled": true,
    "python.testing.pytestEnabled": true,
    "python.testing.unittestEnabled": true,
    "debugpy.showPythonInlineValues": true,
    "autoDocstring.docstringFormat": "pep257",
    "autoDocstring.includeExtendedSummary": true,
    "autoDocstring.includeName": true,
    "restructuredtext.experimental": true,
    "testExplorer.showOnRun": true,
}
